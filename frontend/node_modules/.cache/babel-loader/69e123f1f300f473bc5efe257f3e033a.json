{"ast":null,"code":"import { useState, useEffect } from \"react\";\nimport { getHoursCloseTicketsAuto } from \"../../config\";\nimport toastError from \"../../errors/toastError\";\nimport api from \"../../services/api\";\nconst useTickets = ({\n  searchParam,\n  pageNumber,\n  status,\n  date,\n  showAll,\n  queueIds,\n  withUnreadMessages,\n  tags\n}) => {\n  const [loading, setLoading] = useState(true);\n  const [hasMore, setHasMore] = useState(false);\n  const [tickets, setTickets] = useState([]);\n  const [count, setCount] = useState(0);\n  useEffect(() => {\n    setLoading(true);\n    const delayDebounceFn = setTimeout(() => {\n      const fetchTickets = async () => {\n        try {\n          const {\n            data\n          } = await api.get(\"/tickets\", {\n            params: {\n              searchParam,\n              pageNumber,\n              status,\n              date,\n              showAll,\n              queueIds,\n              withUnreadMessages,\n              tags\n            }\n          });\n          setTickets(data.tickets);\n          let horasFecharAutomaticamente = getHoursCloseTicketsAuto();\n          if (status === \"open\" && horasFecharAutomaticamente && horasFecharAutomaticamente !== \"\" && horasFecharAutomaticamente !== \"0\" && Number(horasFecharAutomaticamente) > 0) {\n            let dataLimite = new Date();\n            dataLimite.setHours(dataLimite.getHours() - Number(horasFecharAutomaticamente));\n            data.tickets.forEach(ticket => {\n              if (ticket.status !== \"closed\") {\n                let dataUltimaInteracaoChamado = new Date(ticket.updatedAt);\n                if (dataUltimaInteracaoChamado < dataLimite) closeTicket(ticket);\n              }\n            });\n          }\n          setHasMore(data.hasMore);\n          setCount(data.count);\n          setLoading(false);\n        } catch (err) {\n          setLoading(false);\n          toastError(err);\n        }\n      };\n      const closeTicket = async ticket => {\n        await api.put(`/tickets/${ticket.id}`, {\n          status: \"closed\",\n          userId: ticket.userId || null\n        });\n      };\n      fetchTickets();\n    }, 500);\n    return () => clearTimeout(delayDebounceFn);\n  }, [searchParam, pageNumber, status, date, showAll, queueIds, withUnreadMessages, tags]);\n  return {\n    tickets,\n    loading,\n    hasMore,\n    count\n  };\n};\nexport default useTickets;","map":{"version":3,"names":["useState","useEffect","getHoursCloseTicketsAuto","toastError","api","useTickets","searchParam","pageNumber","status","date","showAll","queueIds","withUnreadMessages","tags","loading","setLoading","hasMore","setHasMore","tickets","setTickets","count","setCount","delayDebounceFn","setTimeout","fetchTickets","data","get","params","horasFecharAutomaticamente","Number","dataLimite","Date","setHours","getHours","forEach","ticket","dataUltimaInteracaoChamado","updatedAt","closeTicket","err","put","id","userId","clearTimeout"],"sources":["/home/user/whaticket-free/frontend/src/hooks/useTickets/index.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport { getHoursCloseTicketsAuto } from \"../../config\";\nimport toastError from \"../../errors/toastError\";\n\nimport api from \"../../services/api\";\n\nconst useTickets = ({\n    searchParam,\n    pageNumber,\n    status,\n    date,\n    showAll,\n    queueIds,\n    withUnreadMessages,\n    tags,\n}) => {\n    const [loading, setLoading] = useState(true);\n    const [hasMore, setHasMore] = useState(false);\n    const [tickets, setTickets] = useState([]);\n    const [count, setCount] = useState(0);\n\n    useEffect(() => {\n        setLoading(true);\n        const delayDebounceFn = setTimeout(() => {\n            const fetchTickets = async() => {\n                try {\n                    const { data } = await api.get(\"/tickets\", {\n                        params: {\n                            searchParam,\n                            pageNumber,\n                            status,\n                            date,\n                            showAll,\n                            queueIds,\n                            withUnreadMessages,\n                            tags,\n                        },\n                    })\n                    setTickets(data.tickets)\n\n                    let horasFecharAutomaticamente = getHoursCloseTicketsAuto(); \n\n                    if (status === \"open\" && horasFecharAutomaticamente && horasFecharAutomaticamente !== \"\" &&\n                        horasFecharAutomaticamente !== \"0\" && Number(horasFecharAutomaticamente) > 0) {\n\n                        let dataLimite = new Date()\n                        dataLimite.setHours(dataLimite.getHours() - Number(horasFecharAutomaticamente))\n\n                        data.tickets.forEach(ticket => {\n                            if (ticket.status !== \"closed\") {\n                                let dataUltimaInteracaoChamado = new Date(ticket.updatedAt)\n                                if (dataUltimaInteracaoChamado < dataLimite)\n                                    closeTicket(ticket)\n                            }\n                        })\n                    }\n\n                    setHasMore(data.hasMore)\n                    setCount(data.count)\n                    setLoading(false)\n                } catch (err) {\n                    setLoading(false)\n                    toastError(err)\n                }\n            }\n\n            const closeTicket = async(ticket) => {\n                await api.put(`/tickets/${ticket.id}`, {\n                    status: \"closed\",\n                    userId: ticket.userId || null,\n                })\n            }\n\n            fetchTickets()\n        }, 500)\n        return () => clearTimeout(delayDebounceFn)\n    }, [\n        searchParam,\n        pageNumber,\n        status,\n        date,\n        showAll,\n        queueIds,\n        withUnreadMessages,\n        tags,\n    ])\n\n    return { tickets, loading, hasMore, count };\n};\n\nexport default useTickets;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}